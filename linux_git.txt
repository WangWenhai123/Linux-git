ls                    //查看目录信息，-a：显示所有文件及目录 (. 开头的隐藏文件也会列出)；-l：除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出
ll                    //等效于ls -al，并不是Linux的基本命令
cd <directory>        //切换到当前目录
pwd                   //当前路径显示
uname -a              //显示系统全部信息
clear                 //清屏
cat <file>            //显示文件内容
sudo                  //以root权限运行
sudo su <user>        //切换到其他用户
sudo su               //切换到root用户
touch <file>          //创建文件
mkdir <directory>     //创建文件夹
cp <file1> <file2>    //将文件1复制一份，命名为文件2
rm <file>             //删除文件，-f：强制删除；-r：递归，将目录里面的文件全部删除
mv <file or directory> <file or directory>    //后一个参数为不同目录时，将文件或文件夹移动到另一个目录；后一个参数为同一目录下时，将文件或文件夹重命名
ifconfig              //显示或设置网络设备，需要安装net-tools
ip a                  //查看ip信息
reboot                //重启
poweroff              //关机
sync                  //数据同步写入磁盘
find -name <file name>               //查找文件
grep <string> <file or directory>    //查找文件里符合条件的字符串，-r：递归，后一个参数为文件时不加-r，后一个参数为目录时必须加-r；-n：出现字符串的行数；-i：忽略大小写
du <file or directory>               //显示指定的目录或文件所占用的磁盘空间，单位为K。-h：以K，M，G为单位，提高信息的可读性；-s：仅显示总计；--max-depth=<目录层数> 超过指定层数的目录后，予以忽略
df                    //显示目前在 Linux 系统上的文件系统磁盘使用情况统计
gedit <file>          //gedit编辑文件
vim <file>            //vim编辑文件
sudo apt install <software>      //使用apt工具安装软件
sudo dpkg -i <.deb file name>    //手动安装已下载好的.deb安装包
dpkg -l               //查看已安装的软件包及版本
sudo apt update       //已安装的软件包是否有可用的更新，给出汇总报告
sudo apt upgrade      //更新已安装的软件包
sudo apt remove --purge <software>    //卸载软件
chown <user> <file or directory>    //设置文件或文件夹的所有者和文件关联组为user用户。-R：处理指定目录以及其子目录下的所有文件；-h ：修复符号链接
chgrp <group> <file or directory>    //变更文件或目录的所属群组为group群组。-R：处理指定目录以及其子目录下的所有文件
chmod 777 <file or directory>   //修改文件夹及其所有子文件夹的用户访问权限为所有用户。-R：处理指定目录以及其子目录下的所有文件







/dev/sd*为磁盘文件，比如插上的U盘在/dev/目录里以sd*文件为显示的设备文件
/dev/sdb表示U盘，/dev/sdb1表示U盘的第1个分区
sudo umount /media/wwh/udisk/    //取消U盘挂载
sudo mount /dev/sdb1 /media/wwh/udisk/    //将U盘的sdb1分区挂载到udisk文件夹，-o iocharset=utf8：设置为UTF8编码
sudo fdisk -l     //显示当前分区情况
sudo fdisk /dev/sdb    //对U盘进行操作（注意不是对sdb1，也就是fdisk的对象是U盘而不是分区，操作前需要umount），输入m查看帮助后，p：打印分区表，d：删除分区，n：添加新分区，t：更改分区类型；w：保存并退出，q：不保存退出
sudo mkfs -t vfat /dev/sdb1    //在sdb1分区上建立vfat文件系统（此文件系统能被windows识别并使用）
1个扇区是512字节，每个分区的前2048个扇区是保存分区相关信息，必须保留
U盘没有分区后，应该先新建分区，然后修改分区类型为c（W95 FAT32（LBA）），然后新建文件系统为vfat。







ll的内容详解：
第1列表示文件类型，-表示普通文件；d表示目录；l表示链接文件；p表示管理文件；b表示块设备文件；c表示字符设备文件；s表示套接字文件；
第2列表示文件属性，r表示读取权限，w表示写入权限，x表示执行权限，-表示没有权限；前3个表示文件创建者/所有者对该文件所具有的权限，中间3列表示创建者/所有者所在的组的其他用户所具有的权限，最后3列表示其他组的其他用户所具有的权限
第3列表示目录/链接个数
第4列和第5列表示所有者/创建者及其所在的组

.表示当前目录，..表示上一级目录，/表示根目录，~表示用户根目录







Linux常用压缩格式：.tar, .tar.gz, .tar.bz2。.tar只是将文件打包，.tar.gz和.tar.bz2才是压缩
gzip <file or directory>     //将文件或文件夹压缩成.gz。-d：解压缩；-r：递归，压缩或解压缩文件夹必须使用（只是对文件夹内所有文件进行压缩，并没有打包，亦即所有文件会变成文件名.gz，但并没有一个压缩包）
bzip2 <file or directory>    //将文件或文件夹压缩成.bz2。-d：解压缩；-z：压缩
tar -vcf <file1>.tar <file or directory>         //将文件或文件夹打包成file1.tar（并没有压缩）。-v：显示操作过程；-c：创建新的备份文件；-f：指定备份文件
tar -vcjf <file1>.tar.bz2 <file or directory>    //将文件或文件夹压缩成file1.tar.bz2。-j：使用bzip2压缩
tar -vxjf <file>.tar.bz2                         //将file.tar.bz2解压缩。-x：解压缩
tar -vczf <file1>.tar.gz <file or directory>     //将文件或文件夹压缩成file1.tar.gz。-z：使用gzip压缩
tar -vxzf <file1>.tar.gz                         //将file.tar.gz解压缩

zip -v <file1>.zip <file or directory>           //将文件或文件夹压缩成file1.zip。-r：递归
unzip <file>.rar                                 //将file.zip解压缩
Linux使用rar压缩或解压缩时需要安装rar。
rar a <file1>.rar <file or directory>            //将文件或文件夹压缩成file1.rar
rar x <file>.rar                                 //将file.rar解压缩







Linux用户记录在/etc/passwd文件里
Linux用户密码记录在/etc/shadow文件里
sudo adduser <user>                              //添加用户user
sudo deluser <user>                              //删除用户user
sudo addgroup <group>                            //添加用户组group
sudo delgroup <group>                            //删除用户组group







find . -name "gpio*" -print                     //当前目录及子目录中查找所有的以"gpio"开头的文件
find . -name "[a-z]*[4-9].log" -print           //在当前目录查找文件名以一个小写字母开头，最后是4到9加上.log结束的文件（亦即支持通配符）
find . -perm 755 -print                         //在当前目录下查找文件权限位为755的文件
find . -user whwang16 -print                    //在当前目录下查找文件属主为whwang16的文件
find . -group whwang16 -print                   //在当前目录下查找属于whwang16用户组的文件
find . -path ./User -prune -o -name "*.c" -print    //在当前目录下，排除./User目录，查找以".c"结尾的文件
find . -type d -print                           //在当前目录下查找所有的目录（ll中指代普通文件的是"-"，find类型为文件的是"f"）





pam_tally2                                   //查询所有用户登陆失败的次数
pam_tally2 --user <user>                     //查询user用户登陆失败的次数
pam_tally2 --user=<user> --reset             //重置user用户登陆失败的次数



git add <file>               //添加工作区里修改的文件到暂存区
git add .                    //不加参数默认为将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除的文件
git add -A .                 //将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区
git commit -m "  "           //将暂存区的修改全部提交，双引号里的内容为提交说明
git commit -am "  "          //相比于-m省掉了git add步骤，即直接将工作区里所有修改全部提交
git commit -m "summary" -m ' //类似github desktop提交修改，单引号回车后可输入多行description，最后再以一个单引号结束
git restore <file>           //撤销文件的修改（文件还未git add到暂存区）
git restore --staged <file>  //将文件从暂存区中删除（文件已经git add到暂存区），但不会更改文件的内容
git diff                     //当工作区有改动，暂存区为空，diff的对比是“工作区与最后一次commit提交的仓库的共同文件”；
                             //当工作区有改动，暂存区不为空，diff对比的是“工作区与暂存区的共同文件”
git diff HEAD -- <file>      //对比工作区中的文件与HEAD指向的提交的仓库的文件的差异
git diff --cached            //对比本地仓库与暂存仓库的差异
git log                      //查看提交日志
git log --pretty=oneline     //查看提交日志，每个提交日志以一行的形式显示
git log --graph --decorate --oneline --all    //以树形图形式查看log
git reflog                   //查看记录的每一次命令（能查看回退版本之后的更新的版本的操作）
git reset --hard 版本号      //回退到某个版本（工作区里不存在之前所做的修改）
git reset --soft 版本号      //回退到某个版本（工作区里保存之前所做的修改）

git add -i                   //通过交互式拣选操作作用于版本库中已被跟踪的文件中的执行过修改与删除操作的文件
update：把已经tracked的文件添加到暂存区中
revert：把已经添加到暂存区中的文件从暂存区中剔除
add untracked：将untracked状态的文件修改为tracked状态并添加到暂存区中



vim使用：
打开vim后，默认处于指令模式，按a进入编辑模式；或按:或/或?进入命令行模式

命令行模式下：
w：保存；
q：退出；
x（或wq）：保存并退出；
!：强制执行；

指令模式下：
dd：删除光标所在行；
3dd：删除光标所在行及以下2行；
u：撤销；
.：重复上一个操作；
yy：复制光标所在行；
3yy：复制光标所在行及以下2行；
p：粘贴内容到光标下一行；
P：粘贴内容到光标上一行；






一个 C/C++文件要经过预处理(preprocessing)、编译(compilation)、汇编(assembly)和链接(linking)等 4 步才能变成可执行文件。
sudo apt install build-essential       //Ubuntu安装gcc
gcc参数：
-E：预处理；
-c：预处理、编译、汇编源文件，不链接为可执行文件，编译器将输入的.c 文件编译为.o 的目标文件；
-o：<输出文件名> 用来指定编译结束以后的输出文件名，如果不使用这个选项的话 GCC 默认编译出来的可执行文件名字为 a.out。
-g：添加调试信息，如果要使用调试工具(如 GDB)的话就必须加入此选项，此选项指示编译的时候生成调试所需的符号信息。
-O：对程序进行优化编译，如果使用此选项的话整个源代码在编译、链接的的时候都会进行优化，这样产生的可执行文件执行效率就高。
-O2：比-O 更幅度更大的优化，生成的可执行效率更高，但是整个编译过程会很慢。
-I：指定头文件目录；
-L：指定链接时头文件目录；
gcc编译多个源文件：gcc -o <object file> <source file1> <source file2> ...    //souece file可以是源文件，也可以是编译生成的.o文件







git remote add origin <SSH URL>    //将本地仓库与远程仓库关联
git push origin dev:dev1           //将本地仓库的dev分支的提交推送到远程库的dev1分支
git push origin dev                //将本地仓库的dev分支的提交推送到远程库的dev分支
git fetch origin dev               //将某个远程主机的更新全部取回本地仓库
git pull origin dev1:dev           //将远程库的dev1分支拉取过来并与本地的dev分支合并
git pull origin dev                //将远程库的dev分支拉取过来并与本地的当前分支合并，等效于git fetch origin dev与git merge FETCH_HEAD的组合
git rebase 01234567^ 89abcdef --onto dev    //将另一分支的起始01234567提交到终止89abcdef提交（前开后闭，加了^后就是前闭后闭）复制到dev分支上。复制后HEAD处于游离状态，需要执行git switch dev和git reset --hard fedcba98（fedcba98是89abcdef复制过来后新的提交值）


git branch --set-upstream branch-name origin/branch-name    //建立本地分支和远程分支的关联
git branch -a                //查看远程分支和本地分支
git branch 分支名            //创建分支
git branch -d 分支名         //删除分支
git checkout 分支名          //切换分支
git switch 分支名            //切换分支（新命令）
git checkout -b 分支名       //创建分支，然后切换到这个分支，等同于(git branch 分支名)+(git checkout 分支名)
git switch -c 分支名         //创建分支，然后切换到这个分支（新命令）
git merge 分支名             //合并指定分支到当前分支

git stash                          //将当前仓库的修改存储起来，仓库恢复干净。-u可以添加untracked的文件
git stash save "message"           //存储的时候添加message，方便查找
git stash list                     //存储区的所有的存储
git stash pop                      //恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除
git stash pop stash@{0}            //恢复stash@{0}，并删除stash@{0}
git stash apply                    //恢复之前缓存的工作目录，不删除缓存堆栈中的对应stash
git stash apply stash@{1}          //恢复stash@{1}，不删除stash@{1}
git stash drop stash@{2}           //丢弃stash@{2}存储，从列表中删除这个存储
git cherry-pick <版本号>            //将指定版本号的提交应用到当前分支

git tag <name>                     //在当前分支的最新提交上打一个标签
git tag                            //查看所有标签（标签不是按时间顺序列出，而是按字母排序的）
git tag <name> <版本号>             //在版本号的提交上打一个标签
git show <tagname>                 //查看标签信息
git tag -a <tagname> -m "version 0.1 released" 1094adb    //给标签添加说明，-a指定标签名，-m指定说明文字
git tag -d <tagname>               //删除标签

本地仓库修改后准备提交时，发现远程仓库有了新的提交：先git stash保存修改，再git pull拉取最新提交，最后再git stash pop合并修改。如果有冲突，手动修改冲突

多人协作的工作模式：
1、本地commit之后，用git push origin <branch-name>推送自己的修改；
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3、如果合并有冲突，则解决冲突，并在本地提交；
4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！



使用win10自带的ssh服务：打开cmd或powershell，输入：ssh 用户名@ip地址





Ubuntu安装samba服务器：
1、sudo apt update
2、sudo apt install samba
3、sudo vim /etc/samba/smb.conf
4、在文件最后添加以下内容：
[wwh]
comment = wwh folder
path = /home/wwh/
create mask = 0700
directory mask = 0700
valid users = wwh
force user = wwh
force group = wwh
public = yes
guest ok=yes
read only=no
browseable = yes
available = yes
writable = yes
5、按照需求更改共享文件夹的权限，例如chmod 777 /home/wwh/
5、sudo service smbd restart
6、在Windows资源管理器里映射网络驱动器：\\192.168.1.209\wwh




Ubuntu安装ssh服务器：sudo apt install openssh-server



VS Code远程开发：
1、安装remote ssh
2、Ctrl+Shift+P，输入remote-ssh，选择connect current window to host，输入whwang16@172.30.12.89，然后输入远程登陆密码



2837服务器密码：iflytek@123
2831P服务器密码：iflytek@2021
深圳WiFi密码：iflyttest
