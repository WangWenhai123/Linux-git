git常用命令
git config user.name //查看用户名
git config user.email //查看邮箱地址
git config --global user.name  "用户名" //修改全局用户名
git config --global user.email "邮箱地址" //修改全局邮箱地址
git clone 项目地址 //克隆代码
git branch 分支名 //创建分支
git branch -a //查看所有分支
git branch //查看本地分支(结果列表中前面标*号的表示当前使用分支)
git branch -r //查看远程分支
git checkout 分支名 //切换分支
git pull //拉取服务器代码
git status //查看当前项目中有哪些文件被修改过
git add 文件名 //提交代码至缓存
git add -f 文件名 //强制提交代码至缓存
git add -u 路径 //将修改过的被跟踪代码提交缓存
git add -A 路径 //将修改过的未被跟踪的代码提交至缓存
git add . //将所有的修改的文件提交到缓存区
git rm --cached 文件名 //不删除物理文件，仅将该文件从缓存中删除
git commit -m "修改记录" //提交代码到本地仓库中
git push --set-upstream origin master //设置当前分支在远程分支对应的名称
git push //将缓存区代码推送到Git服务器
git push origin test:master         // 提交本地test分支作为远程的master分支
git reset --hard HEAD^ //回退上一个版本
git reset --hard commit_id //回退到任意版本
git push -f //强制推版本

git add <file>               //添加工作区里修改的文件到暂存区
git commit -m "  "           //将暂存区的修改全部提交，双引号里的内容为提交说明
git commit -am "  "          //相比于-m省掉了git add步骤，即直接将工作区里所有修改全部提交
git commit -m "summary" -m ' //类似github desktop提交修改，单引号回车后可输入多行description，最后再以一个单引号结束
git restore <file>           //撤销文件的修改（文件还未git add到暂存区）
git restore --staged <file>  //将文件从暂存区中删除（文件已经git add到暂存区），但不会更改文件的内容
git diff                     //当工作区有改动，暂存区为空，diff的对比是“工作区与最后一次commit提交的仓库的共同文件”；
                             //当工作区有改动，暂存区不为空，diff对比的是“工作区与暂存区的共同文件”
git diff HEAD -- <file>      //对比工作区中的文件与HEAD指向的提交的仓库的文件的差异
git log                      //查看提交日志
git log --pretty=oneline     //查看提交日志，每个提交日志以一行的形式显示
git reflog                   //查看记录的每一次命令（能查看回退版本之后的更新的版本的操作）
git reset --hard 版本号      //回退到某个版本

git branch -a                //查看所有分支
git branch 分支名            //创建分支
git branch -d 分支名         //删除分支
git checkout 分支名          //切换分支
git switch 分支名            //切换分支（新命令）
git checkout -b 分支名       //创建分支，然后切换到这个分支，等同于(git branch 分支名)+(git checkout 分支名)
git switch -c 分支名         //创建分支，然后切换到这个分支（新命令）

git pull <远程主机名> <远程分支名>:<本地分支名>     //从远程获取代码并合并本地的版本。例：git pull origin master:brantest

使用win10自带的ssh服务：打开cmd，输入ssh 用户名@ip地址


linux常用命令
cat
touch 文件名 //创建文件
mkdir 文件夹名 //创建文件夹
mv 文件名 移动目的地文件名 //移动文件
mv 文件名 修改后的文件名 //重命名文件
lsb_release -a //查看ubuntu版本
cat /etc/issue //查看版本当前操作系统发行版信息
cat /proc/cpuinfo //查看CPU核心数
cat /proc/version //查看Linux内核版本
cp dir1/a.doc dir2 //表示将dir1下的a.doc文件复制到dir2目录下
cp -r dir1 dir2 //表示将dir1及其dir1下所包含的文件复制到dir2下
cp -r dir1/. dir2 //表示将dir1下的文件复制到dir2,不包括dir1目录
ls //查看文件和目录
ls -l //使用长清单模式来列出文件和目录
ls -a //显示隐藏文件
du -sh 文件夹名 //查看某一指定文件夹大小
dpkg -l //查看已安装的软件包及版本
vim /etc/apt/sources.list //修改软件源
sudo apt-get update //更新软件列表
sudo apt-get upgrade //更新软件
sudo apt-get remove --purge 软件名 //卸载软件
ulimit -a //查看当前系统设置的最大句柄数
ulimit -n 2048 //当前用户的最大允许打开文件数量设置为2048
chmod -R 777 文件夹 //修改文件夹及其所有子文件夹的用户访问权限为所有用户
df -h //查看磁盘空间
du -sh //查看当前目录总大小
fdisk -l //查看磁盘
grep -rn 字符串 文件夹 //在文件夹的所有文件中查找字符串
find ./ -name "文件名" //查找文件
ps //查看进程
kill //关闭进程
nice -n -20 用户程序名 //以最高优先级运行用户程序
7z a name.7z filename -v2048m //将filename以每包不超过2048M压缩到name.7z中
tar -zxvf 文件名 //将文件解压到当前目录
tar -cvf 文件名 文件夹//压缩文件夹
tail -f 文件名 //实时查看该文件
chgrp 目标用户组名 文件或文件夹名 [-R]     //修改文件或文件夹的用户组为目标用户组，-R表示递归，只用于文件夹
chown 目标用户名 文件或文件夹名 [-R] [-h]  //修改文件或文件夹的用户为目标用户，-R表示递归，只用于文件夹，-h表示改变符号链接文件的属主时不影响该链接所指向的目标文件
chmod 777 文件或文件夹名                  //修改文件或文件夹的文件属性

2837芯片编译平台地址：
172.31.53.237 root

./build.sh -n //新建立一个编译配置